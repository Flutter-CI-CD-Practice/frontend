name: Create JIRA Sub-tasks from GitHub Issue Template

on:
  issues:
    types: [opened, edited]

jobs:
  create-jira-subtasks:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Epic Key from Issue Title
        id: extract-epic
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          # Epic 키 추출 (보통 "ABC-123" 형식)
          EPIC_KEY=$(echo "$ISSUE_TITLE" | grep -oE '[A-Z]+-[0-9]+')
          if [ -z "$EPIC_KEY" ]; then
            echo "Epic key not found in issue title. Skipping."
            exit 0
          fi
          echo "epic_key=$EPIC_KEY" >> $GITHUB_OUTPUT

      - name: Get Issue Form Data
        id: get-form-data
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const body = issue.data.body;
            
            // 이슈 폼에서 체크된 항목 추출
            const lines = body.split('\n');
            const checkedItems = [];
            
            // 체크된 항목 찾기 (이슈 폼은 "- [x] 항목명" 형식으로 체크박스를 표시)
            for (const line of lines) {
              const match = line.match(/^\s*-\s*\[x\]\s*(.+)$/i);
              if (match) {
                checkedItems.push(match[1].trim());
              }
            }
            
            return checkedItems;

      - name: Create JIRA Sub-tasks
        id: create-subtasks
        if: steps.extract-epic.outputs.epic_key != ''
        uses: actions/github-script@v6
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          EPIC_KEY: ${{ steps.extract-epic.outputs.epic_key }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const epicKey = process.env.EPIC_KEY;
            const checkedItems = ${{ steps.get-form-data.outputs.result }};
            
            if (!checkedItems || checkedItems.length === 0) {
              console.log('No checked items found in the issue form.');
              return [];
            }
            
            const createdTasks = [];
            const failedTasks = [];
            
            // 각 체크된 항목에 대해 JIRA 하위 작업 생성
            for (const item of checkedItems) {
              try {
                // JIRA API 호출을 위한 curl 명령어 실행
                const { execSync } = require('child_process');
                
                const curlCommand = `curl -s -X POST \
                  -H "Authorization: Basic $(echo -n ${process.env.JIRA_USER_EMAIL}:${process.env.JIRA_API_TOKEN} | base64)" \
                  -H "Content-Type: application/json" \
                  -d '{
                    "fields": {
                      "project": {
                        "key": "${epicKey.split('-')[0]}"
                      },
                      "parent": {
                        "key": "${epicKey}"
                      },
                      "summary": "${item.replace(/"/g, '\\"')}",
                      "issuetype": {
                        "name": "Sub-task"
                      }
                    }
                  }' \
                  "${process.env.JIRA_BASE_URL}/rest/api/2/issue/"`;
                
                const response = execSync(curlCommand).toString();
                
                // 응답 파싱하여 생성된 이슈 키 확인
                const responseObj = JSON.parse(response);
                if (responseObj && responseObj.key) {
                  createdTasks.push({
                    name: item,
                    key: responseObj.key
                  });
                  console.log(`Created JIRA sub-task ${responseObj.key} for: ${item}`);
                } else {
                  console.error(`Failed to create sub-task for: ${item}`);
                  failedTasks.push(item);
                }
              } catch (error) {
                console.error(`Error creating sub-task for ${item}: ${error.message}`);
                failedTasks.push(item);
              }
            }
            
            return {
              created: createdTasks,
              failed: failedTasks
            };

      - name: Add Comment to GitHub Issue
        uses: actions/github-script@v6
        if: steps.create-subtasks.outputs.result != ''
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = JSON.parse('${{ steps.create-subtasks.outputs.result }}');
            const epicKey = '${{ steps.extract-epic.outputs.epic_key }}';
            
            let comment = '';
            
            if (result.created && result.created.length > 0) {
              comment += `:white_check_mark: Created ${result.created.length} JIRA sub-tasks under Epic ${epicKey}:\n`;
              for (const task of result.created) {
                comment += `- [${task.key}] ${task.name}\n`;
              }
            }
            
            if (result.failed && result.failed.length > 0) {
              comment += `\n:x: Failed to create ${result.failed.length} sub-tasks:\n`;
              for (const task of result.failed) {
                comment += `- ${task}\n`;
              }
            }
            
            if (comment) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

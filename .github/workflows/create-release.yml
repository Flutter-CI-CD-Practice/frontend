name: Flutter Release Workflow
on:
  pull_request:
    types: [closed]
    branches:
      - main
    
jobs:
  create_release:
    if: github.event.pull_request.merged == true && (contains(github.event.pull_request.labels.*.name, 'major') || contains(github.event.pull_request.labels.*.name, 'minor') || contains(github.event.pull_request.labels.*.name, 'patch'))
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.calculate_version.outputs.new_version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_html_url: ${{ steps.create_release.outputs.html_url }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag or set 0.0.0 if none exists
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          
      - name: Calculate new version
        id: calculate_version
        run: |
          LATEST_TAG=${{ steps.get_latest_tag.outputs.latest_tag }}
          
          # Split the version into major, minor, patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
          
          # Increment based on label
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'major') }}" == "true" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'minor') }}" == "true" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'patch') }}" == "true" ]]; then
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.calculate_version.outputs.new_version }}
          release_name: ${{ github.event.pull_request.title }}
          body: ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false
          
  build_apk:
    needs: create_release
    runs-on: ubuntu-latest
    outputs:
      apk_url: ${{ steps.get_apk_url.outputs.apk_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'
          channel: 'stable'
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Build APK
        run: flutter build apk --release
        
      - name: Upload APK to Release
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./build/app/outputs/flutter-apk/app-release.apk
          asset_name: app-release-${{ needs.create_release.outputs.new_version }}.apk
          asset_content_type: application/vnd.android.package-archive
      
      - name: Get APK URL
        id: get_apk_url
        run: |
          REPO="${GITHUB_REPOSITORY}"
          VERSION="${{ needs.create_release.outputs.new_version }}"
          APK_URL="https://github.com/${REPO}/releases/download/${VERSION}/app-release-${VERSION}.apk"
          echo "apk_url=${APK_URL}" >> $GITHUB_OUTPUT

  github-releases-to-discord:
    needs: [create_release, build_apk]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Get PR Body
        id: get_pr_body
        run: |
          PR_BODY='${{ github.event.pull_request.body }}'
          PR_BODY="${PR_BODY//'%'/'%25'}"
          PR_BODY="${PR_BODY//$'\n'/'%0A'}"
          PR_BODY="${PR_BODY//$'\r'/'%0D'}"
          echo "pr_body=$PR_BODY" >> $GITHUB_OUTPUT
      
      - name: Send Discord Notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          VERSION: ${{ needs.create_release.outputs.new_version }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ steps.get_pr_body.outputs.pr_body }}
          APK_URL: ${{ needs.build_apk.outputs.apk_url }}
          RELEASE_URL: ${{ needs.create_release.outputs.release_html_url }}
        with:
          args: |
            안뇽안뇽! 오늘 대시가 가져 온 배포 소식은~~
            
            **버전**: {{env.VERSION}}
            **제목**: {{env.PR_TITLE}}
            
            **내용**:
            {{env.PR_BODY}}
            
            **다운로드 링크**: [APK 다운로드]({{env.APK_URL}})
            **릴리즈 링크**: [릴리즈 페이지]({{env.RELEASE_URL}})
            
            ||@everyone||

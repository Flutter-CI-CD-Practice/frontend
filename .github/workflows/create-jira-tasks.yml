name: Create JIRA Sub-tasks from GitHub Issue Template

on:
  issues:
    types: [opened, edited]

jobs:
  create-jira-subtasks:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Epic Key from Issue Title
        id: extract-epic
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          # Epic 키 추출 (보통 "ABC-123" 형식)
          EPIC_KEY=$(echo "$ISSUE_TITLE" | grep -oE '[A-Z]+-[0-9]+')
          if [ -z "$EPIC_KEY" ]; then
            echo "Epic key not found in issue title. Skipping."
            exit 0
          fi
          echo "epic_key=$EPIC_KEY" >> $GITHUB_OUTPUT
          echo "project_key=${EPIC_KEY%%-*}" >> $GITHUB_OUTPUT

      - name: Get Issue Form Data
        id: get-form-data
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const body = issue.data.body;
            
            // 이슈 폼에서 체크된 항목 추출
            const lines = body.split('\n');
            const checkedItems = [];
            
            // 체크된 항목 찾기 (이슈 폼은 "- [x] 항목명" 형식으로 체크박스를 표시)
            for (const line of lines) {
              const match = line.match(/^\s*-\s*\[x\]\s*(.+)$/i);
              if (match) {
                checkedItems.push(match[1].trim());
              }
            }
            
            console.log('Checked items:', checkedItems);
            return checkedItems;

      - name: Login to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}

      - name: Create Sub-tasks
        if: steps.extract-epic.outputs.epic_key != ''
        id: create-subtasks
        run: |
          PROJECT_KEY="${{ steps.extract-epic.outputs.project_key }}"
          EPIC_KEY="${{ steps.extract-epic.outputs.epic_key }}"
          
          # JSON 형태로 반환된 체크된 항목 목록
          CHECKED_ITEMS='${{ toJSON(steps.get-form-data.outputs.result) }}'
          echo "Checked items: $CHECKED_ITEMS"
          
          # 결과 저장 변수
          CREATED_TASKS=()
          FAILED_TASKS=()
          
          # 각 체크된 항목마다 JIRA 하위 작업 생성
          for ITEM in $(echo $CHECKED_ITEMS | jq -r '.[]'); do
            echo "Creating sub-task for: $ITEM"
            
            # JIRA 하위 작업 생성
            RESPONSE=$(npx -y @atlassian/gajira-create@latest --project "$PROJECT_KEY" --issuetype "Sub-task" --summary "$ITEM" --fields "{\"parent\":{\"key\":\"$EPIC_KEY\"}}")
            
            # 응답에서 이슈 키 추출
            if [[ $RESPONSE =~ [A-Z]+-[0-9]+ ]]; then
              ISSUE_KEY=$(echo $RESPONSE | grep -oE '[A-Z]+-[0-9]+')
              echo "Created JIRA sub-task: $ISSUE_KEY"
              CREATED_TASKS+=("{\"key\":\"$ISSUE_KEY\",\"name\":\"$ITEM\"}")
            else
              echo "Failed to create sub-task for: $ITEM"
              echo "Response: $RESPONSE"
              FAILED_TASKS+=("{\"name\":\"$ITEM\",\"error\":\"Creation failed\"}")
            fi
          done
          
          # 결과를 JSON 형태로 변환
          if [ ${#CREATED_TASKS[@]} -gt 0 ]; then
            CREATED_JSON="["
            for TASK in "${CREATED_TASKS[@]}"; do
              CREATED_JSON+="$TASK,"
            done
            CREATED_JSON=${CREATED_JSON%,}
            CREATED_JSON+="]"
            echo "created_json=$CREATED_JSON" >> $GITHUB_OUTPUT
          else
            echo "created_json=[]" >> $GITHUB_OUTPUT
          fi
          
          if [ ${#FAILED_TASKS[@]} -gt 0 ]; then
            FAILED_JSON="["
            for TASK in "${FAILED_TASKS[@]}"; do
              FAILED_JSON+="$TASK,"
            done
            FAILED_JSON=${FAILED_JSON%,}
            FAILED_JSON+="]"
            echo "failed_json=$FAILED_JSON" >> $GITHUB_OUTPUT
          else
            echo "failed_json=[]" >> $GITHUB_OUTPUT
          fi

      - name: Add Comment to GitHub Issue
        uses: actions/github-script@v6
        if: steps.create-subtasks.outputs.created_json != '' || steps.create-subtasks.outputs.failed_json != ''
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const epicKey = '${{ steps.extract-epic.outputs.epic_key }}';
            const createdTasksJson = '${{ steps.create-subtasks.outputs.created_json }}';
            const failedTasksJson = '${{ steps.create-subtasks.outputs.failed_json }}';
            
            let createdTasks = [];
            let failedTasks = [];
            
            try {
              if (createdTasksJson && createdTasksJson !== '[]') {
                createdTasks = JSON.parse(createdTasksJson);
              }
              
              if (failedTasksJson && failedTasksJson !== '[]') {
                failedTasks = JSON.parse(failedTasksJson);
              }
            } catch (e) {
              console.error('Error parsing JSON:', e);
            }
            
            let comment = '';
            
            if (createdTasks.length > 0) {
              comment += `:white_check_mark: Created ${createdTasks.length} JIRA sub-tasks under Epic ${epicKey}:\n`;
              for (const task of createdTasks) {
                comment += `- [${task.key}] ${task.name}\n`;
              }
            }
            
            if (failedTasks.length > 0) {
              comment += `\n:x: Failed to create ${failedTasks.length} sub-tasks:\n`;
              for (const task of failedTasks) {
                comment += `- ${task.name}: ${task.error || 'Unknown error'}\n`;
              }
            }
            
            if (comment) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

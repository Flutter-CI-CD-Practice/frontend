name: Create JIRA Sub-tasks from GitHub Issue Checklist

on:
  issues:
    types: [opened, edited]

jobs:
  create-jira-subtasks:
    runs-on: ubuntu-latest

    steps:
      # 1. 에픽 키 추출 (예: FCC-123)
      - name: Extract Epic Key from Issue Title
        id: extract-epic
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          EPIC_KEY=$(echo "$ISSUE_TITLE" | grep -oE '[A-Z]+-[0-9]+')
          if [ -z "$EPIC_KEY" ]; then
            echo "Epic key not found in issue title. Skipping."
            exit 0
          fi
          echo "epic_key=$EPIC_KEY" >> $GITHUB_OUTPUT
          echo "project_key=${EPIC_KEY%%-*}" >> $GITHUB_OUTPUT

      # 2. 체크리스트 항목 파싱
      - name: Parse Checked Items from Issue Body
        id: get-form-data
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const lines = issue.data.body.split('\n');
            const checkedItems = lines
              .map(line => {
                const match = line.match(/^\s*-\s*\[x\]\s*(.+)$/i);
                return match ? match[1].trim() : null;
              })
              .filter(Boolean);

            core.setOutput("checked", JSON.stringify(checkedItems));

      # 3. JIRA 로그인
      - name: Login to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}

      # 4. Sub-task 생성 (각 항목 반복 처리)
      - name: Create Sub-tasks in JIRA
        if: steps.extract-epic.outputs.epic_key != ''
        uses: actions/github-script@v6
        env:
          PROJECT_KEY: ${{ steps.extract-epic.outputs.project_key }}
          EPIC_KEY: ${{ steps.extract-epic.outputs.epic_key }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { PROJECT_KEY, EPIC_KEY } = process.env;
            const checkedItems = JSON.parse(`${{ steps.get-form-data.outputs.checked }}`);
            const { execSync } = require('child_process');

            const created = [];
            const failed = [];

            for (const item of checkedItems) {
              try {
                const result = execSync(
                  `jira create --project ${PROJECT_KEY} --issuetype "Sub-task" --summary "${item}" --parent ${EPIC_KEY}`,
                  { encoding: 'utf-8' }
                );
                const match = result.match(/([A-Z]+-\d+)/);
                if (match) {
                  created.push({ key: match[1], name: item });
                } else {
                  failed.push({ name: item, error: 'No issue key found' });
                }
              } catch (error) {
                failed.push({ name: item, error: error.message });
              }
            }

            core.setOutput("created_json", JSON.stringify(created));
            core.setOutput("failed_json", JSON.stringify(failed));

      # 5. 생성 결과 코멘트로 남기기
      - name: Comment on GitHub Issue
        uses: actions/github-script@v6
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const epicKey = '${{ steps.extract-epic.outputs.epic_key }}';
            const createdTasks = JSON.parse('${{ steps.create-sub-tasks.outputs.created_json || "[]" }}');
            const failedTasks = JSON.parse('${{ steps.create-sub-tasks.outputs.failed_json || "[]" }}');

            let comment = '';

            if (createdTasks.length > 0) {
              comment += `:white_check_mark: Created ${createdTasks.length} JIRA sub-tasks under Epic **${epicKey}**:\n`;
              for (const task of createdTasks) {
                comment += `- [${task.key}] ${task.name}\n`;
              }
            }

            if (failedTasks.length > 0) {
              comment += `\n:x: Failed to create ${failedTasks.length} sub-tasks:\n`;
              for (const task of failedTasks) {
                comment += `- ${task.name}: ${task.error}\n`;
              }
            }

            if (comment) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
